/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import LayerSpec from './type-checker';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {LayerSpec};
export const LayerSpecSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "LayerType": {
      "enum": [
        "deck",
        "geojson",
        "raster",
        "vector"
      ],
      "type": "string"
    },
    "Record<string,Record<string,unknown>>": {
      "defaultProperties": [
      ],
      "description": "keys should start by 'where' or 'and'",
      "type": "object"
    },
    "Record<string,number>": {
      "defaultProperties": [
      ],
      "type": "object"
    },
    "Record<string,unknown>": {
      "defaultProperties": [
      ],
      "type": "object"
    }
  },
  "properties": {
    "deck": {
      "items": {
      },
      "type": "array"
    },
    "decodeFunction": {
      "type": "string"
    },
    "decodeParams": {
      "$ref": "#/definitions/Record<string,number>"
    },
    "id": {
      "type": [
        "string",
        "number"
      ]
    },
    "images": {
      "items": {
        "defaultProperties": [
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "options": {
            "defaultProperties": [
            ],
            "properties": {
              "pixelRatio": {
                "type": "number"
              },
              "sdf": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "src": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "src"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "interactivity": {
      "items": {
      },
      "type": "array"
    },
    "onAfterAdd": {
      "defaultProperties": [
      ],
      "type": "object"
    },
    "onAfterRemove": {
      "defaultProperties": [
      ],
      "type": "object"
    },
    "opacity": {
      "type": "number"
    },
    "params": {
      "$ref": "#/definitions/Record<string,unknown>"
    },
    "render": {
      "defaultProperties": [
      ],
      "properties": {
        "layers": {
        },
        "parse": {
          "type": "boolean"
        }
      },
      "required": [
        "layers",
        "parse"
      ],
      "type": "object"
    },
    "source": {
    },
    "sqlParams": {
      "$ref": "#/definitions/Record<string,Record<string,unknown>>"
    },
    "type": {
      "$ref": "#/definitions/LayerType"
    },
    "visibility": {
      "type": "boolean"
    },
    "zIndex": {
      "type": "number"
    }
  },
  "required": [
    "id",
    "source",
    "type"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isLayerSpec = ajv.compile(LayerSpecSchema) as ValidateFunction<LayerSpec>;
export default function validate(value: unknown): LayerSpec {
  if (isLayerSpec(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isLayerSpec.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'LayerSpec'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
